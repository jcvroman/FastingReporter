name: cd-release
    # Continuous Delivery (CD): Testing Strategy for DevOps: Commit Cyle, Acceptance Cycle, Release Cycle, Product Cycle.
    #   Commit Cycle: Unit Test, Coding Standards Asserted, Common Error Detection.

on:
    push:
        tags:
        - v*

jobs:
    # calc-version
    calc-version:
        runs-on: ubuntu-latest
        outputs:
            packageSemVer: ${{ env.PACKAGE_SEMVER }}
            
        steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            fetch-depth: 0

        # Use gitversion to determine next version (e.g. based on git tag for this release).
        - name: Install GitVersion
          uses: gittools/actions/gitversion/setup@v0.9.9
          with:
            versionSpec: 'x.x.x'
              
        - name: Determine Version
          id:   gitversion
          uses: gittools/actions/gitversion/execute@v0.9.9
              
        - name: Display SemVer
          run: |
            echo "SemVer: $GITVERSION_SEMVER"
            
        - name: Set envs
          run: |
            echo PACKAGE_SEMVER=${{ steps.gitversion.outputs.semVer }} >> ${GITHUB_ENV}

    # Release: Build and Release to App Store.
    Release:
        runs-on: macOS-latest
        needs: calc-version

        env:
            PACKAGE_SEMVER: ${{ needs.calc-version.outputs.packageSemVer }}
            XC_VERSION: ${{ '12.4' }}
            XC_PROJECT: ${{ 'FastingReporter.xcodeproj' }}
            XC_SCHEME: ${{ 'FastingReporter' }}
            XC_CONFIGURATION: ${{ 'Release' }}
            XC_ARCHIVE_PATH: ${{ './FastingReporter.xcarchive' }}
            XC_EXPORT_PATH: ${{ './artifacts/' }}
            XC_EXPORT_OPTIONS_FILE_PATH: ${{ './export/vraasnekkeri_ExportOptions.plist' }}
            ENCRYPTED_CERTS_FILE_PATH: ${{ './export/vraasnekkeri_distribution.p12.gpg' }}
            DECRYPTED_CERTS_FILE_PATH: ${{ './export/vraasnekkeri_distribution.p12' }}
            ENCRYPTED_PROVISION_FILE_PATH: ${{ './export/vraasnekkeri_FastingReporter_iOS_App_Store.mobileprovision.tar.gz.gpg' }}
            DECRYPTED_PROVISION_FILE_PATH: ${{ './export/vraasnekkeri_FastingReporter_iOS_App_Store.mobileprovision.tar.gz' }}
            CERTS_ENCRYPTION_PWD: ${{ secrets.DEPLOY_PASSWORD }}
            PROVISION_ENCRYPTION_PWD: ${{ secrets.DEPLOY_PASSWORD }}
            CERTS_EXPORT_PWD: ${{ secrets.DEPLOY_PASSWORD }}
            KEYCHAIN: ${{ 'build.keychain' }}
    
        steps:
        - name: Select Xcode
          run: |
            sudo xcode-select -switch /Applications/Xcode_$XC_VERSION.app
            xcodebuild -version

        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Display SemVer
          run: |
            echo "SemVer: ${{ env.PACKAGE_SEMVER }}"

        - name: Bump version
          uses: yanamura/ios-bump-version@v1
          with:
            version: ${{ env.PACKAGE_SEMVER }}
            build-number: ${{github.run_number}}

        #- name: Commit bumped version to repository
        #  run: |
        #    git add .
        #    git commit -m "Bump version to ${{ env.PACKAGE_SEMVER }} ${{github.run_number}}."
        #    git push origin master

        - name: Commit bumped version to repository
          run: |
            git config user.name github-actions
            git config user.email github-actions@github.com
            git switch -c temp
            git add .
            git commit -m "Bump version"
            git fetch
            git checkout master
            git merge temp
            git branch -d temp
            git push origin master

        #- name: Set up Xcode signing
        #  run: |
        #    security create-keychain -p "" "$KEYCHAIN"
        #    security list-keychains -s "$KEYCHAIN"
        #    security default-keychain -s "$KEYCHAIN"
        #    security unlock-keychain -p "" "$KEYCHAIN"
        #    security set-keychain-settings
        #    security list-keychains
        #    gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERTS_ENCRYPTION_PWD" "$ENCRYPTED_CERTS_FILE_PATH"
        #    gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISION_ENCRYPTION_PWD" "$ENCRYPTED_PROVISION_FILE_PATH"
        #    security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$CERTS_EXPORT_PWD" -A
        #    security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
        #    tar xzvf $DECRYPTED_PROVISION_FILE_PATH
        #    mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
        #    for PROVISION in `ls ./*.mobileprovision`
        #    do
        #      UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
        #      cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
        #    done

        #- name: Build archive
        #  run: |
        #    mkdir -p artifacts
        #    xcodebuild archive \
        #      -project "$XC_PROJECT" \
        #      -scheme "$XC_SCHEME" \
        #      -configuration "$XC_CONFIGURATION" \
        #      -archivePath "$XC_ARCHIVE_PATH" \
        #      "OTHER_CODE_SIGN_FLAGS=--keychain '$KEYCHAIN'"

        #- name: Export archive for App Store
        #  run: |
        #    xcodebuild \
        #      -exportArchive \
        #      -archivePath "$XC_ARCHIVE_PATH" \
        #      -exportOptionsPlist "$XC_EXPORT_OPTIONS_FILE_PATH" \
        #      -exportPath "$XC_EXPORT_PATH"

        #- name: Upload artifacts to GitHub
        #  uses: actions/upload-artifact@v2
        #  with:
        #   name: IPA
        #   path: ./artifacts/*.ipa
        #   if-no-files-found: error

        #- name: Upload app to App Store
        #  env:
        #    APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
        #    APP_STORE_CONNECT_PASSWORD: ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
        #  run: |
        #    xcrun altool \
        #      --upload-app \
        #      --type ios \
        #      --file "$XC_EXPORT_PATH/$XC_SCHEME.ipa" \
        #      --username "$APP_STORE_CONNECT_USERNAME" \
        #      --password "$APP_STORE_CONNECT_PASSWORD" \
        #      --verbose
